services:
  db:
    image: postgres:15
    container_name: "${DEVELOP}-${PROJECT_NAME}_db"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "grandchat", "-d", "grandchat" ]
      interval: 1s
      timeout: 5s
      retries: 10
    environment:
      - POSTGRES_USER=grandchat
      - POSTGRES_PASSWORD=grandchat
      - POSTGRES_DB=grandchat
    expose:
      - 5432
    ports:
      - ${POSTGRES_PORT:-5433}:5432
    command: ["postgres", "-c", "wal_level=logical", "-c", "wal_writer_delay=10ms"]

  backend:
    build: ./backend
    restart: unless-stopped
    container_name: "${DEVELOP}-${PROJECT_NAME}_backend"
    volumes:
      - ./backend:/usr/src/app
    ports:
      - "${BACKEND_PORT:-9002}:8000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - default
      - nginx_network

  migrations:
    build: ./backend
    restart: on-failure
    container_name: "${DEVELOP}-${PROJECT_NAME}_migrations"
    command: >
      python manage.py migrate
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy

  centrifugo:
    image: centrifugo/centrifugo:v6
    restart: unless-stopped
    container_name: "${DEVELOP}-${PROJECT_NAME}_centrifugo"
    volumes:
      - ./centrifugo:/centrifugo
    command: centrifugo -c config.json
    ports:
      - "${CENTRIFUGO_PORT:-8001}:8000"
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - default
      - nginx_network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.3
    container_name: "${DEVELOP}-${PROJECT_NAME}_zookeeper"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.4.3
    depends_on:
      - zookeeper
    container_name: "${DEVELOP}-${PROJECT_NAME}_kafka"
    ports:
      - "${KAFKA_PORT:-29092}:29092"
    expose:
      - 9092
    healthcheck:
      test: ["CMD", "kafka-topics", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 2s
      timeout: 5s
      retries: 10
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:${KAFKA_PORT:-29092}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_MAX_REQUEST_SIZE: "10485760"
      KAFKA_MESSAGE_MAX_BYTES: "10485760"
      KAFKA_MAX_PARTITION_FETCH_BYTES: "10485760"
    restart: unless-stopped

  connect:
    image: debezium/connect:2.5
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    container_name: "${DEVELOP}-${PROJECT_NAME}_connect"
    ports:
      - "${KAFKA_CONNECT_PORT:-8083}:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      STATUS_STORAGE_TOPIC: connect_statuses

  connect-config-loader:
    image: appropriate/curl:latest
    depends_on:
      - connect
    volumes:
      - ./debezium/debezium-config.json:/debezium-config.json
    container_name: "${DEVELOP}-${PROJECT_NAME}_connect-config-loader"
    command: >
      /bin/sh -c "
        echo 'Waiting for Kafka Connect to start...';
        while ! curl -f http://connect:8083/connectors; do sleep 1; done;
        echo 'Kafka Connect is up, posting configuration';
        curl -X DELETE -H 'Content-Type: application/json' http://connect:8083/connectors/grandchat-chat-connector;
        curl -X POST -H 'Content-Type: application/json' -v --data @/debezium-config.json http://connect:8083/connectors;
        echo 'Configuration posted';
      "

  redis:
    image: redis:${REDIS_VERSION:-7}-alpine
    container_name: "${DEVELOP}-${PROJECT_NAME}_redis"
    ports:
      - "${REDIS_PORT:-6380}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 2s
      timeout: 5s
      retries: 10

volumes:
  postgres_data:
    name: "${ENVIRONMENT}-${PROJECT_NAME}_db-data"

networks:
  nginx_network:
    name: "nginx_network"
    external: true
